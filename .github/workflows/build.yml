name: build
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Windows'
            os: windows-latest
            generator: 'Visual Studio 17 2022'
            arch: '-A x64'
            vcpkg_dir: 'C:\vcpkg'
          - name: 'Linux'
            os: ubuntu-latest
            generator: 'Unix Makefiles'
            vcpkg_dir: '/usr/local/share/vcpkg'
            arch: ''
          - name: 'Mac OSX'
            os: macos-latest
            generator: 'Unix Makefiles'
            vcpkg_dir: '/usr/local/share/vcpkg'
            arch: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cmake \
            -B ./build \
            -G "${{ matrix.generator }}" ${{ matrix.arch }} \
            -DMSGNET_BUILD_TESTS=ON \
            -DMSGNET_BUILD_EXAMPLES=ON \
            -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Compile
        shell: bash
        run: |
          cmake --build ./build --config Debug

      - name: Tests
        shell: bash
        run: cd build && ctest -C Debug --verbose

  coverage:
    name: Test Coverage on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Linux'
            os: ubuntu-latest
            generator: 'Unix Makefiles'
            vcpkg_dir: '/usr/local/share/vcpkg'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cmake \
            -B ./build \
            -G "${{ matrix.generator }}" \
            -DMSGNET_BUILD_TESTS=ON \
            -DMSGNET_TEST_COVERAGE=ON \
            -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Compile
        shell: bash
        run: |
          cmake --build ./build --config Debug

      - name: Tests
        shell: bash
        run: cd build && ctest -C Debug --verbose

      - name: Process the coverage
        shell: bash
        run: |
          lcov --directory ./build --capture --output-file ./build/coverage.info
          lcov --remove ./build/coverage.info '/usr/*' "${HOME}"'/.cache/*' '*/catch2/*' '*/test/*' --output-file ./build/coverage.info
          lcov --list ./build/coverage.info

      - name: Upload the coverage
        shell: bash
        run: |
          bash <(curl -s https://codecov.io/bash) -f ./build/coverage.info || echo "Codecov did not collect coverage reports"

  lsan:
    name: Test LSAN on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Linux'
            os: ubuntu-latest
            generator: 'Unix Makefiles'
            vcpkg_dir: '/usr/local/share/vcpkg'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure
        shell: bash
        run: |
          mkdir build
          export CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          cmake \
            -B ./build \
            -G "${{ matrix.generator }}" \
            -DMSGNET_BUILD_TESTS=ON \
            -DLLVM_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer \
            -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Compile
        shell: bash
        run: |
          cmake --build ./build --config Debug

      - name: Tests
        shell: bash
        run: cd build && ctest -C Debug --verbose
